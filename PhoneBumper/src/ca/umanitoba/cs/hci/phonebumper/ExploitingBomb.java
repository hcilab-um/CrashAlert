package ca.umanitoba.cs.hci.phonebumper;

import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

public class ExploitingBomb extends View {

	public static final String BOMB_EXPLOSION = "ExploitingBomb.BOMB_EXPLOSION";
	public static final String BOMB_DIFUSED = "ExploitingBomb.BOMB_DIFUSED";
	public static final String BOMB_INDEX = "ExploitingBomb.BOMB_INDEX";

	private Drawable bombImage;
	private Drawable activeImage;
	private Drawable explosionImage;

	private int bombIndex = -1;
	private long uiChangeTimeOut = -1;
	private BombUIUpdater uiUpdater = null;
	private boolean isCancelled = false;

	public ExploitingBomb(Context context) {
		super(context);

		bombImage = context.getResources().getDrawable(R.drawable.bomb);
		activeImage = context.getResources().getDrawable(R.drawable.active);
		explosionImage = context.getResources().getDrawable(R.drawable.explosion);
		setBackgroundDrawable(bombImage);
	}

	public ExploitingBomb(Context context, AttributeSet attrs) {
		super(context, attrs);

		bombImage = context.getResources().getDrawable(R.drawable.bomb);
		activeImage = context.getResources().getDrawable(R.drawable.active);
		explosionImage = context.getResources().getDrawable(R.drawable.explosion);
		setBackgroundDrawable(bombImage);
	}

	public ExploitingBomb(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);

		bombImage = context.getResources().getDrawable(R.drawable.bomb);
		activeImage = context.getResources().getDrawable(R.drawable.active);
		explosionImage = context.getResources().getDrawable(R.drawable.explosion);
		setBackgroundDrawable(bombImage);
	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		int width = MeasureSpec.getSize(widthMeasureSpec);
		int height = width * bombImage.getIntrinsicHeight() / bombImage.getIntrinsicWidth();
		setMeasuredDimension(width, height);
	}

	public void activateBomb(int index, long delay) {
		setBackgroundDrawable(activeImage);
		isCancelled = false;
		bombIndex = index;
		uiChangeTimeOut = delay;
		if (uiUpdater != null)
			uiUpdater.cancel(true);
		uiUpdater = new BombUIUpdater();
		uiUpdater.execute(explosionImage);
		invalidate();
	}

	public void cancelBomb() {
		isCancelled = true;
		if (uiUpdater != null)
			uiUpdater.cancel(true);
		setBackgroundDrawable(bombImage);
		invalidate();
	}

	public void resetBomb(long timeToReset) {
		uiChangeTimeOut = timeToReset;
		if (uiUpdater != null)
			uiUpdater.cancel(true);
		uiUpdater = new BombUIUpdater();
		uiUpdater.execute(bombImage);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
			if (getBackground() != activeImage)
				return true;

			isCancelled = true;
			if (uiUpdater != null)
				uiUpdater.cancel(true);
			setBackgroundDrawable(bombImage);
			triggerDifusionIntent();
			invalidate();
		}
		return true;
	}

	private void triggerExplosionIntent() {
		Intent intent = new Intent(ExploitingBomb.BOMB_EXPLOSION);
		intent.putExtra(ExploitingBomb.BOMB_INDEX, bombIndex);
		getContext().sendBroadcast(intent);
	}

	private void triggerDifusionIntent() {
		Intent intent = new Intent(ExploitingBomb.BOMB_DIFUSED);
		intent.putExtra(ExploitingBomb.BOMB_INDEX, bombIndex);
		getContext().sendBroadcast(intent);
	}

	public boolean isActive() {
		if (getBackground() == bombImage)
			return false;
		return true;
	}

	public class BombUIUpdater extends AsyncTask<Drawable, Integer, Drawable> {
		@Override
		protected Drawable doInBackground(Drawable... params) {
			try {
				Thread.sleep(uiChangeTimeOut);
			} catch (InterruptedException e) {
			}
			return params[0];
		}

		protected void onPostExecute(Drawable result) {
			if (isCancelled)
				return;

			setBackgroundDrawable(result);
			invalidate();

			if (result == explosionImage)
				triggerExplosionIntent();
		}
	}

}
